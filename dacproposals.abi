{
  "____comment": "This file was generated by eosio-abigen. DO NOT EDIT - 2018-07-05T22:43:12",
  "version": "eosio::abi/1.0",
  "types": [],
  "structs": [{
      "name": "proposal",
      "base": "",
      "fields": [{
          "name": "id",
          "type": "uint64"
        }
      ]
    },{
      "name": "proposalvote",
      "base": "",
      "fields": [{
          "name": "propid",
          "type": "uint64"
        },{
          "name": "voter",
          "type": "name"
        },{
          "name": "vote",
          "type": "uint8"
        },{
          "name": "commenthash",
          "type": "string"
        }
      ]
    },{
      "name": "vote",
      "base": "",
      "fields": [{
          "name": "voter",
          "type": "name"
        },{
          "name": "proxy",
          "type": "name"
        },{
          "name": "stake",
          "type": "asset"
        }
      ]
    },{
      "name": "createprop",
      "base": "",
      "fields": [{
          "name": "cand",
          "type": "name"
        },{
          "name": "title",
          "type": "string"
        },{
          "name": "summary",
          "type": "string"
        },{
          "name": "desc",
          "type": "string"
        },{
          "name": "duedate",
          "type": "uint8"
        },{
          "name": "arbitrator",
          "type": "name"
        },{
          "name": "payamount",
          "type": "asset"
        },{
          "name": "parentid",
          "type": "uint64"
        },{
          "name": "recurring",
          "type": "uint8"
        },{
          "name": "complete",
          "type": "uint8"
        }
      ]
    },{
      "name": "voteprop",
      "base": "",
      "fields": [{
          "name": "cand",
          "type": "name"
        },{
          "name": "proposal",
          "type": "uint8"
        },{
          "name": "vote",
          "type": "uint8"
        }
      ]
    },{
      "name": "newperiod",
      "base": "",
      "fields": [{
          "name": "privaccount",
          "type": "name"
        }
      ]
    },{
      "name": "claim",
      "base": "",
      "fields": [{
          "name": "worker",
          "type": "name"
        },{
          "name": "proposalid",
          "type": "uint64"
        }
      ]
    },{
      "name": "cancel",
      "base": "",
      "fields": [{
          "name": "worker",
          "type": "name"
        },{
          "name": "proposalid",
          "type": "uint64"
        }
      ]
    }
  ],
  "actions": [{
      "name": "createprop",
      "type": "createprop",
      "ricardian_contract": "This allows a user to create a proposal.  To create a proposal a user must also lock a bond in eosDAC tokens.  This bond will be lost if the proposal is marked as spam (defined by a 100% no vote).  If no worker attribute is provided and the type is REQUEST then it will require a privileged account to create."
    },{
      "name": "voteprop",
      "type": "voteprop",
      "ricardian_contract": "Vote for a proposal, this can either be yes, no or abstain.  If a proposal receives 100% no votes then it will be classes as span / frivilous.  The account voting must be a currently elected custodian."
    },{
      "name": "newperiod",
      "type": "newperiod",
      "ricardian_contract": "Similar to the action run to tally custodian votes. Proposals will be marked as accepted when their threshold passed the defined point. It will perform the following actions;Tally votes for each open proposal, it must verify that each vote was made by a currently elected custodian.  Votes made by unelected custodians for active proposals must not be removed, but will not be counted.  Voting data for unelected custodians can only be removed once the proposal has expired or been completed. Transfer proposal funds as available to the proposal contract from the DAC payment account.  The contract will keep track of all the accepted proposals and ensure that there are enough funds in the worker proposals account."
    },{
      "name": "claim",
      "type": "claim",
      "ricardian_contract": "Allows a worker to claim their pay, the DAC must have previously changed the status to complete.  If it is not marked as complete then it will fail.  We may also do this using a transaction proposal which has to be signed by both parties."
    },{
      "name": "cancel",
      "type": "cancel",
      "ricardian_contract": "Cancel the proposal and return the funds to the DAC account, requires the same 2/3-party signature."
    }
  ],
  "tables": [{
      "name": "proposals",
      "index_type": "i64",
      "key_names": [
        "id"
      ],
      "key_types": [
        "uint64"
      ],
      "type": "proposal"
    },{
      "name": "propvotes",
      "index_type": "i64",
      "key_names": [
        "propid"
      ],
      "key_types": [
        "uint64"
      ],
      "type": "proposalvote"
    },{
      "name": "votes",
      "index_type": "i64",
      "key_names": [
        "voter"
      ],
      "key_types": [
        "name"
      ],
      "type": "vote"
    }
  ],
  "ricardian_clauses": [{
                              "id": "constitution",
                              "body":"The eosdac worker proposal contract\nWorker proposals are key to the running of a DAC. The contract will facilitate the exchange of a product or service in return for a payment. Proposals are generated by the worker seeking to perform the service in exchange for a payment. Multiple worker proposals can be created for multi-milestone projects. Requests can be generated by the DAC when a specific service is required, it will be entered into the database but will not have a specific account or payment attached. Workers will tender for the job and will submit their own sub-proposal for each request."}],
  "error_messages": [],
  "abi_extensions": []
}